//某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。这里确保每个输入的日
//期都是合法的，但不一定是合理的——假设已知镇上没有超过200岁的老人，而今天是2014年9月6日，所以超过200岁的生日
//和未出生的生日都是不合理的，应该被过滤掉。
//中等难度，写一个比较年长年幼的函数，再通过结构体就可以当作单个变量筛选的问题了。有个坑符合条件为零时只输出0.
#include<stdio.h>
typedef struct date{
	char name[6];
	int year;
	int month;
	int day;
}DATE;
int older(DATE a,DATE b);
int main()
{
	int n=0;
	int cnt=0;
	int flag=0;
	scanf("%d",&n);
	DATE oldest={"a",1814,9,6},youngest={"b",2014,9,6},old={"a",2014,9,6},young={"b",1814,9,6},P;//结构体初始化要用双引号。
	for(int i=0;i<n;i++){
		scanf("%s %d/%d/%d",&P.name,&P.year,&P.month,&P.day);
		if(older(P,youngest)&&older(oldest,P)){
			cnt++;
			if(older(P,old)){
				old=P;
				flag++;
			}
			if(older(young,P)){
				young=P;
				flag++;
			}
		}
	}
	if(flag==0){
		printf("0");
	}
	if(flag!=0){
		printf("%d %s %s",cnt,old.name,young.name);
	}
	return 0;
}
int older(DATE a,DATE b){
	if(a.year*10000+a.month*100+a.day<=b.year*10000+b.month*100+b.day){
		return 1;
	}
	return 0;
}
