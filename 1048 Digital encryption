//本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：
//对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，
//则再加 10。这里令个位为第 1 位。
//这题坑在数位不等要补0，题目也不说.
#include<stdio.h>
int main()
{
	char a[101],b[101];
	int la,lb;
	char ch='=';
	int cnt=0;
	while((ch=getchar())!=' '){
		a[cnt]=ch;
		cnt++;
	}
	la=cnt;
	cnt=0;
	while((ch=getchar())!='\n'){
		b[cnt]=ch;
		cnt++;
	}
	lb=cnt;
	int max=0;
	if(la>lb){
		max=la;
	}
	else{
		max=lb;
	}
	char A[max+1],B[max+1];
	for(int i=0;i<max;i++){
		if(la-i-1>=0&&lb-i-1>=0){
			A[i]=a[la-i-1];
			B[i]=b[lb-i-1];
		}
		if(lb-i-1<0){
			B[i]='0';
			A[i]=a[la-i-1];
		}
		if(la-i-1<0){
			A[i]='0';
			B[i]=b[lb-i-1];
		}
	}
	for(int i=0;i<max;i++){
		int x,y,z;
		if(i%2==0){
			x=B[i]-'0';
			y=A[i]-'0';
			z=(x+y)%13;
			if(z<10){
				B[i]=z+'0';
			}
			if(z==10) B[i]='J';
			if(z==11) B[i]='Q';
			if(z==12) B[i]='K';
		}
		else{
			x=B[i]-'0';
			y=A[i]-'0';
			z=x-y;
			if(z>=0){
				B[i]=z+'0';
			}
			else{
				B[i]=z+10+'0';
			}
		}
	}
	for(int i=max-1;i>=0;i--){
		printf("%c",B[i]);
	}
	return 0;
}
